<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>multipart/form-data,application/json</consumes>
        <consumes_customized>true</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>add&amp;rename</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	/* global request, response */
	/* global gs, x_376096_sc_pubatt, x_376096_multipart, sn_ws_err */
	/* global GlideScriptedExtensionPoint, GlideRecordSecure, GlideSysAttachment */
	/* eslint no-undef: "error" */

	const action = request.queryParams.action;
	if (action == 'add') {
		let multipartData;
		try {
			multipartData = new x_376096_multipart.Multipart().parse({
				contentType: request.getHeader('content-type'),
				contentSize: request.getHeader('content-size'),
				stream: request.body.dataStream,
				fileOutput: 'attachment'
			});

			handleAttachmentAdd(multipartData, request, response);
		} catch (e) {
			gs.error(`Multipart.parse failed: ${e}\n${e.stack}`);
			response.setStatus(500);
		} finally {
			// for some reason (system attachment save not yet completed?) deleting
			// attachments here does not work, so we use this event-workaround
			if (multipartData) {
				const attSysIDs = [];
				for (const { key, value } of multipartData) {
					if (typeof value == 'object' && value.sys_id) {
						attSysIDs.push(value.sys_id);
					}
				}

				if (attSysIDs.length) {
					gs.eventQueue('x_376096_sc_pubatt.cleanup_attachments', null, attSysIDs.join(','), '');
				}
			}
		}
	} else if (action == 'rename') {
		handleAttachmentRename();
	} else {
		response.setStatus(404);
	}

	function handleAttachmentRename() {
		if (request.queryParams.new_name?.length == 1 && request.queryParams.sys_id?.length == 1) {
			const eps = new GlideScriptedExtensionPoint().getExtensions('PublicAttExt');
			if (eps.length) {
				eps[0].initialize();

				const attGr = new GlideRecordSecure('sys_attachment');
				attGr.addQuery('sys_id', request.queryParams.sys_id[0]);
				attGr.setLimit(1);
				attGr.query();
				if (attGr.next()) {
					if (attGr.canWrite()) {
						const success = eps[0].renameAttachment(attGr.getUniqueValue(), request.queryParams.new_name[0]);
						if (success) {
							response.setStatus(200);
						} else {
							response.setStatus(500);
						}
					} else {
						response.setStatus(401);
					}
				} else {
					response.setStatus(404);
				}

				setBody({});

			} else {
				gs.error('PublicAttExt implementation required');
				response.setStatus(500);
			}
		} else {
			response.setError(new sn_ws_err.BadRequestError('Invalid or missing parameters.'));
		}
	}

	function handleAttachmentAdd(multipartData) {
		const data = {};
		for (const { key, value } of multipartData) {
			if (key in data) {
				throw new Error('Duplicate Key!');
			}

			data[key] = value;
		}

		if (!data.sysparm_table || data.sysparm_table != request.queryParams.table
			|| !data.sysparm_sys_id || data.sysparm_sys_id != request.queryParams.sys_id
			|| typeof data.attachFile != 'object') {
			response.setError(new sn_ws_err.BadRequestError('Invalid or missing parameters.' + JSON.stringify(data)));
			return;
		}
			
		const eps = new GlideScriptedExtensionPoint().getExtensions('PublicAttExt');
		let ext;
		if (eps.length) {
			eps[0].initialize();
			ext = eps[0];
		} else {
			gs.error('PublicAttExt implementation required');
			response.setStatus(500);
			return;
		}
		
		if (!ext.canCreateAttachment(data.sysparm_table, data.sysparm_sys_id, data.attachFile.fileName, data.attachFile.contentType)) {
			response.setStatus(401);
			return;
		}

		const attMoved = eps[0].moveAttachment(data.attachFile.sys_id, data.sysparm_table, data.sysparm_sys_id);
		if (!attMoved) {
			response.setStatus(401);
			return;
		}

		const attGr = new GlideRecordSecure('sys_attachment');
		attGr.addQuery('sys_id', data.attachFile.sys_id);
		attGr.setLimit(1);
		attGr.query();
		if (attGr.next()) {
			if (request.queryParams.load_attachment_record == 'true') {
				const attData = new x_376096_sc_pubatt.RESTUtil().getAttachmentData(attGr);
				setBody(attData);
			} else {
				setBody({
					'sys_id': attGr.getUniqueValue(),
					'content_type': attGr.getValue('content_type'),
					'file_name': attGr.getValue('file_name')
				});
			}

			response.setStatus(200);
			
			// delete the attachFile member (still a reference to the original 'parsed' array) to exclude it from cleanup
			delete data.attachFile.sys_id;
		} else {
			response.setStatus(400);
		}
	}

	function setBody(json) {
		// Note: when using response.setBody(obj), the http result will be "{ result: json }"
		// but the the angular.do?sysparm_type=ngk_attachments request "json" directly
		// We mimic this by directly writing to the stream (we could check for the accept header, 
		// but the NOW client attachment implementation only requires JSON at the moment)

		response.setContentType('application/json');
		response.getStreamWriter().writeString(JSON.stringify(json));
	}

})(request, response);]]></operation_script>
        <operation_uri>/api/x_376096_sc_pubatt/upload</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>false</requires_authentication>
        <requires_snc_internal_role>false</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-02 14:40:02</sys_created_on>
        <sys_id>091aa011933b0a10e02873718bba10f8</sys_id>
        <sys_mod_count>115</sys_mod_count>
        <sys_name>add&amp;rename</sys_name>
        <sys_package display_value="Service Catalog+ Public Attachment" source="x_376096_sc_pubatt">fb6ef9ba97c7f1103c2d3f56f053af68</sys_package>
        <sys_policy/>
        <sys_scope display_value="Service Catalog+ Public Attachment">fb6ef9ba97c7f1103c2d3f56f053af68</sys_scope>
        <sys_update_name>sys_ws_operation_091aa011933b0a10e02873718bba10f8</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-09-06 17:32:54</sys_updated_on>
        <web_service_definition display_value="upload">94e9acdd93f70a10e02873718bba105f</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
